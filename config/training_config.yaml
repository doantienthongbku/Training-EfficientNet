data:
    train:
        module: torch.utils.data
        class: DataLoader
        DataLoader:
        dataset:
            module: core.data.custom_dataset
            class: DogCat
            Params:
                image_dir: '''./Dataset/train'''
                image_pattern: '''*.jpg'''
                transforms: transforms.Compose([transforms.ToTensor(),
                                                transforms.Normalize((0.1307,), (0.3081,))])
        batch_size: 128
        shuffle: True
        num_workers: 4

    valid:
        module: torch.utils.data
        class: DataLoader
        DataLoader:
        dataset:
            module: core.data.custom_dataset
            class: DogCat
            Params:
                image_dir: '''./Dataset/valid'''
                image_pattern: '''*.jpg'''
                transforms: transforms.Compose([transforms.ToTensor(),
                                                transforms.Normalize((0.1307,), (0.3081,))])
        batch_size: 128
        shuffle: False
        num_workers: 4

model:
    module: core.model.model
    class: EfficientNet
    Params:
        num_classes: 10
        model: B0
        pretrained: True
        advprop: True
        in_channels: 3

loss:
    module: torch.nn
    class: CrossEntropyLoss
    Params:
        weight: None
        size_average: None
        ignore_index: -100
        reduce: None
        reduction: '''mean'''
        label_smoothing: 0.0

optim:
    module: torch.optim
    class: Adam
    Params:
        params: model.parameters()
        lr: 0.001
        betas: (0.9, 0.999)
        eps: 1e-08
        weight_decay: 1e-4
        amsgrad: True

lr_scheduler:
    module: torch.optim.lr_scheduler
    class: StepLR
    Params:
        optimizer: optimizer
        step_size: 30
        gamma: 0.1
        last_epoch: -1
        verbose: False

early_stopping:
    module: core.handlers.early_stopping
    class: EarlyStopping
    Params:
        patience: 7
        verbose: False
        delta: 0
        path: 'checkpoint.pth'
        trace_func: print

metric:
    module: core.handlers.evaluator
    class: Metrics
    Metrics:
        metrics:
        accuracy:
            module: core.metric.classification_metrics
            class: Metric
            Metric:
            metric_fn:
                module: core.metric.classification_metrics
                class: Accuracy
                Accuracy:
                num_classes: 10
            output_transform: 'lambda x: (x[0].softmax(dim=1), x[1])'
        loss:
            module: core.metric.loss
            class: Loss
            Loss:
            loss_fn:
                module: torch.nn
                class: CrossEntropyLoss
            output_transform: 'lambda x: (x[0], x[1])'

writer:
    module: core.handlers.writer
    class: Writer
    Writer:
        save_dir: '''checkpoint/MNIST/'''

plotter:
    module: core.handlers.plotter
    class: Plotter
    Plotter:
        save_dir: '''checkpoint/MNIST/'''

logger:
    module: core.handlers.logger
    class: Logger
    Logger:
        save_dir: '''checkpoint/MNIST/'''
        mode: logging.DEBUG
        format: '''%(asctime)s - %(name)s - %(levelname)s - %(message)s'''

model_inspection:
    module: core.handlers.model_inspection
    class: ModelInspection
    ModelInspection:
        verbose: True
        input_shape: '(28, 28, 1)'

trainer:
    module: core.engine
    class: Trainer
    Trainer:
        project_name: '''MNIST'''
        data:
        train: config['data']['train']
        train_eval: config['data']['train']
        valid: config['data']['valid']
        test: config['data']['valid']
        model: config['model']
        loss: config['loss']
        optim: config['optim']
        metric: config['metric']
        early_stopping: config['early_stopping']
        lr_scheduler: config['lr_scheduler']
        logger: config['logger']
        writer: config['writer']
        plotter: config['plotter']
        model_inspection: config['model_inspection']
        save_dir: '''checkpoint/MNIST/'''

extralibs:
    torch: torch
    logging: logging
    transforms: torchvision.transforms